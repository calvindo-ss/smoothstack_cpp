// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Account_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Account_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Account_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Account_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Account_2eproto;
namespace pb {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Account_Transaction;
struct Account_TransactionDefaultTypeInternal;
extern Account_TransactionDefaultTypeInternal _Account_Transaction_default_instance_;
class Accounts;
struct AccountsDefaultTypeInternal;
extern AccountsDefaultTypeInternal _Accounts_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Account* Arena::CreateMaybeMessage<::pb::Account>(Arena*);
template<> ::pb::Account_Transaction* Arena::CreateMaybeMessage<::pb::Account_Transaction>(Arena*);
template<> ::pb::Accounts* Arena::CreateMaybeMessage<::pb::Accounts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Account_Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Account.Transaction) */ {
 public:
  inline Account_Transaction() : Account_Transaction(nullptr) {}
  ~Account_Transaction() override;
  explicit constexpr Account_Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account_Transaction(const Account_Transaction& from);
  Account_Transaction(Account_Transaction&& from) noexcept
    : Account_Transaction() {
    *this = ::std::move(from);
  }

  inline Account_Transaction& operator=(const Account_Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account_Transaction& operator=(Account_Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account_Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account_Transaction* internal_default_instance() {
    return reinterpret_cast<const Account_Transaction*>(
               &_Account_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account_Transaction& a, Account_Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Account_Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account_Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account_Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account_Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account_Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account_Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account_Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Account.Transaction";
  }
  protected:
  explicit Account_Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDtFieldNumber = 4,
    kAmountSentFieldNumber = 1,
    kAmountRecvFieldNumber = 2,
    kRecipientAccountnumFieldNumber = 3,
  };
  // optional string dt = 4;
  bool has_dt() const;
  private:
  bool _internal_has_dt() const;
  public:
  void clear_dt();
  const std::string& dt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dt();
  PROTOBUF_NODISCARD std::string* release_dt();
  void set_allocated_dt(std::string* dt);
  private:
  const std::string& _internal_dt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dt(const std::string& value);
  std::string* _internal_mutable_dt();
  public:

  // optional double amount_sent = 1;
  bool has_amount_sent() const;
  private:
  bool _internal_has_amount_sent() const;
  public:
  void clear_amount_sent();
  double amount_sent() const;
  void set_amount_sent(double value);
  private:
  double _internal_amount_sent() const;
  void _internal_set_amount_sent(double value);
  public:

  // optional double amount_recv = 2;
  bool has_amount_recv() const;
  private:
  bool _internal_has_amount_recv() const;
  public:
  void clear_amount_recv();
  double amount_recv() const;
  void set_amount_recv(double value);
  private:
  double _internal_amount_recv() const;
  void _internal_set_amount_recv(double value);
  public:

  // optional int32 recipient_accountnum = 3;
  bool has_recipient_accountnum() const;
  private:
  bool _internal_has_recipient_accountnum() const;
  public:
  void clear_recipient_accountnum();
  int32_t recipient_accountnum() const;
  void set_recipient_accountnum(int32_t value);
  private:
  int32_t _internal_recipient_accountnum() const;
  void _internal_set_recipient_accountnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Account.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dt_;
  double amount_sent_;
  double amount_recv_;
  int32_t recipient_accountnum_;
  friend struct ::TableStruct_Account_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Account_Transaction Transaction;

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kFnameFieldNumber = 4,
    kLnameFieldNumber = 5,
    kSsnFieldNumber = 6,
    kDateopenedFieldNumber = 8,
    kAccountNumFieldNumber = 1,
    kAccounttypeFieldNumber = 9,
    kBalanceFieldNumber = 7,
    kAdminFieldNumber = 10,
  };
  // optional string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string fname = 4;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fname();
  PROTOBUF_NODISCARD std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // optional string lname = 5;
  bool has_lname() const;
  private:
  bool _internal_has_lname() const;
  public:
  void clear_lname();
  const std::string& lname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lname();
  PROTOBUF_NODISCARD std::string* release_lname();
  void set_allocated_lname(std::string* lname);
  private:
  const std::string& _internal_lname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lname(const std::string& value);
  std::string* _internal_mutable_lname();
  public:

  // optional string ssn = 6;
  bool has_ssn() const;
  private:
  bool _internal_has_ssn() const;
  public:
  void clear_ssn();
  const std::string& ssn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssn();
  PROTOBUF_NODISCARD std::string* release_ssn();
  void set_allocated_ssn(std::string* ssn);
  private:
  const std::string& _internal_ssn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssn(const std::string& value);
  std::string* _internal_mutable_ssn();
  public:

  // optional string dateopened = 8;
  bool has_dateopened() const;
  private:
  bool _internal_has_dateopened() const;
  public:
  void clear_dateopened();
  const std::string& dateopened() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dateopened(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dateopened();
  PROTOBUF_NODISCARD std::string* release_dateopened();
  void set_allocated_dateopened(std::string* dateopened);
  private:
  const std::string& _internal_dateopened() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dateopened(const std::string& value);
  std::string* _internal_mutable_dateopened();
  public:

  // optional int32 accountNum = 1;
  bool has_accountnum() const;
  private:
  bool _internal_has_accountnum() const;
  public:
  void clear_accountnum();
  int32_t accountnum() const;
  void set_accountnum(int32_t value);
  private:
  int32_t _internal_accountnum() const;
  void _internal_set_accountnum(int32_t value);
  public:

  // optional int32 accounttype = 9;
  bool has_accounttype() const;
  private:
  bool _internal_has_accounttype() const;
  public:
  void clear_accounttype();
  int32_t accounttype() const;
  void set_accounttype(int32_t value);
  private:
  int32_t _internal_accounttype() const;
  void _internal_set_accounttype(int32_t value);
  public:

  // optional double balance = 7;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // optional int32 admin = 10;
  bool has_admin() const;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  int32_t admin() const;
  void set_admin(int32_t value);
  private:
  int32_t _internal_admin() const;
  void _internal_set_admin(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dateopened_;
  int32_t accountnum_;
  int32_t accounttype_;
  double balance_;
  int32_t admin_;
  friend struct ::TableStruct_Account_2eproto;
};
// -------------------------------------------------------------------

class Accounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Accounts) */ {
 public:
  inline Accounts() : Accounts(nullptr) {}
  ~Accounts() override;
  explicit constexpr Accounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Accounts(const Accounts& from);
  Accounts(Accounts&& from) noexcept
    : Accounts() {
    *this = ::std::move(from);
  }

  inline Accounts& operator=(const Accounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accounts& operator=(Accounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Accounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const Accounts* internal_default_instance() {
    return reinterpret_cast<const Accounts*>(
               &_Accounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Accounts& a, Accounts& b) {
    a.Swap(&b);
  }
  inline void Swap(Accounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Accounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Accounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Accounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Accounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Accounts";
  }
  protected:
  explicit Accounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // repeated .pb.Account account = 1;
  int account_size() const;
  private:
  int _internal_account_size() const;
  public:
  void clear_account();
  ::pb::Account* mutable_account(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Account >*
      mutable_account();
  private:
  const ::pb::Account& _internal_account(int index) const;
  ::pb::Account* _internal_add_account();
  public:
  const ::pb::Account& account(int index) const;
  ::pb::Account* add_account();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Account >&
      account() const;

  // @@protoc_insertion_point(class_scope:pb.Accounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Account > account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Account_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account_Transaction

// optional double amount_sent = 1;
inline bool Account_Transaction::_internal_has_amount_sent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Account_Transaction::has_amount_sent() const {
  return _internal_has_amount_sent();
}
inline void Account_Transaction::clear_amount_sent() {
  amount_sent_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Account_Transaction::_internal_amount_sent() const {
  return amount_sent_;
}
inline double Account_Transaction::amount_sent() const {
  // @@protoc_insertion_point(field_get:pb.Account.Transaction.amount_sent)
  return _internal_amount_sent();
}
inline void Account_Transaction::_internal_set_amount_sent(double value) {
  _has_bits_[0] |= 0x00000002u;
  amount_sent_ = value;
}
inline void Account_Transaction::set_amount_sent(double value) {
  _internal_set_amount_sent(value);
  // @@protoc_insertion_point(field_set:pb.Account.Transaction.amount_sent)
}

// optional double amount_recv = 2;
inline bool Account_Transaction::_internal_has_amount_recv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Account_Transaction::has_amount_recv() const {
  return _internal_has_amount_recv();
}
inline void Account_Transaction::clear_amount_recv() {
  amount_recv_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Account_Transaction::_internal_amount_recv() const {
  return amount_recv_;
}
inline double Account_Transaction::amount_recv() const {
  // @@protoc_insertion_point(field_get:pb.Account.Transaction.amount_recv)
  return _internal_amount_recv();
}
inline void Account_Transaction::_internal_set_amount_recv(double value) {
  _has_bits_[0] |= 0x00000004u;
  amount_recv_ = value;
}
inline void Account_Transaction::set_amount_recv(double value) {
  _internal_set_amount_recv(value);
  // @@protoc_insertion_point(field_set:pb.Account.Transaction.amount_recv)
}

// optional int32 recipient_accountnum = 3;
inline bool Account_Transaction::_internal_has_recipient_accountnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Account_Transaction::has_recipient_accountnum() const {
  return _internal_has_recipient_accountnum();
}
inline void Account_Transaction::clear_recipient_accountnum() {
  recipient_accountnum_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Account_Transaction::_internal_recipient_accountnum() const {
  return recipient_accountnum_;
}
inline int32_t Account_Transaction::recipient_accountnum() const {
  // @@protoc_insertion_point(field_get:pb.Account.Transaction.recipient_accountnum)
  return _internal_recipient_accountnum();
}
inline void Account_Transaction::_internal_set_recipient_accountnum(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  recipient_accountnum_ = value;
}
inline void Account_Transaction::set_recipient_accountnum(int32_t value) {
  _internal_set_recipient_accountnum(value);
  // @@protoc_insertion_point(field_set:pb.Account.Transaction.recipient_accountnum)
}

// optional string dt = 4;
inline bool Account_Transaction::_internal_has_dt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Account_Transaction::has_dt() const {
  return _internal_has_dt();
}
inline void Account_Transaction::clear_dt() {
  dt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Account_Transaction::dt() const {
  // @@protoc_insertion_point(field_get:pb.Account.Transaction.dt)
  return _internal_dt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account_Transaction::set_dt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 dt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.Transaction.dt)
}
inline std::string* Account_Transaction::mutable_dt() {
  std::string* _s = _internal_mutable_dt();
  // @@protoc_insertion_point(field_mutable:pb.Account.Transaction.dt)
  return _s;
}
inline const std::string& Account_Transaction::_internal_dt() const {
  return dt_.Get();
}
inline void Account_Transaction::_internal_set_dt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account_Transaction::_internal_mutable_dt() {
  _has_bits_[0] |= 0x00000001u;
  return dt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account_Transaction::release_dt() {
  // @@protoc_insertion_point(field_release:pb.Account.Transaction.dt)
  if (!_internal_has_dt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = dt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account_Transaction::set_allocated_dt(std::string* dt) {
  if (dt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.Transaction.dt)
}

// -------------------------------------------------------------------

// Account

// optional int32 accountNum = 1;
inline bool Account::_internal_has_accountnum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Account::has_accountnum() const {
  return _internal_has_accountnum();
}
inline void Account::clear_accountnum() {
  accountnum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t Account::_internal_accountnum() const {
  return accountnum_;
}
inline int32_t Account::accountnum() const {
  // @@protoc_insertion_point(field_get:pb.Account.accountNum)
  return _internal_accountnum();
}
inline void Account::_internal_set_accountnum(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  accountnum_ = value;
}
inline void Account::set_accountnum(int32_t value) {
  _internal_set_accountnum(value);
  // @@protoc_insertion_point(field_set:pb.Account.accountNum)
}

// optional string username = 2;
inline bool Account::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Account::has_username() const {
  return _internal_has_username();
}
inline void Account::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:pb.Account.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.username)
}
inline std::string* Account::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pb.Account.username)
  return _s;
}
inline const std::string& Account::_internal_username() const {
  return username_.Get();
}
inline void Account::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_username() {
  // @@protoc_insertion_point(field_release:pb.Account.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.username)
}

// optional string password = 3;
inline bool Account::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Account::has_password() const {
  return _internal_has_password();
}
inline void Account::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:pb.Account.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.password)
}
inline std::string* Account::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:pb.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:pb.Account.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.password)
}

// optional string fname = 4;
inline bool Account::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Account::has_fname() const {
  return _internal_has_fname();
}
inline void Account::clear_fname() {
  fname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Account::fname() const {
  // @@protoc_insertion_point(field_get:pb.Account.fname)
  return _internal_fname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_fname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.fname)
}
inline std::string* Account::mutable_fname() {
  std::string* _s = _internal_mutable_fname();
  // @@protoc_insertion_point(field_mutable:pb.Account.fname)
  return _s;
}
inline const std::string& Account::_internal_fname() const {
  return fname_.Get();
}
inline void Account::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000004u;
  return fname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_fname() {
  // @@protoc_insertion_point(field_release:pb.Account.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.fname)
}

// optional string lname = 5;
inline bool Account::_internal_has_lname() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Account::has_lname() const {
  return _internal_has_lname();
}
inline void Account::clear_lname() {
  lname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Account::lname() const {
  // @@protoc_insertion_point(field_get:pb.Account.lname)
  return _internal_lname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_lname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 lname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.lname)
}
inline std::string* Account::mutable_lname() {
  std::string* _s = _internal_mutable_lname();
  // @@protoc_insertion_point(field_mutable:pb.Account.lname)
  return _s;
}
inline const std::string& Account::_internal_lname() const {
  return lname_.Get();
}
inline void Account::_internal_set_lname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  lname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_lname() {
  _has_bits_[0] |= 0x00000008u;
  return lname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_lname() {
  // @@protoc_insertion_point(field_release:pb.Account.lname)
  if (!_internal_has_lname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = lname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_lname(std::string* lname) {
  if (lname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.lname)
}

// optional string ssn = 6;
inline bool Account::_internal_has_ssn() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Account::has_ssn() const {
  return _internal_has_ssn();
}
inline void Account::clear_ssn() {
  ssn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Account::ssn() const {
  // @@protoc_insertion_point(field_get:pb.Account.ssn)
  return _internal_ssn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_ssn(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.ssn)
}
inline std::string* Account::mutable_ssn() {
  std::string* _s = _internal_mutable_ssn();
  // @@protoc_insertion_point(field_mutable:pb.Account.ssn)
  return _s;
}
inline const std::string& Account::_internal_ssn() const {
  return ssn_.Get();
}
inline void Account::_internal_set_ssn(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_ssn() {
  _has_bits_[0] |= 0x00000010u;
  return ssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_ssn() {
  // @@protoc_insertion_point(field_release:pb.Account.ssn)
  if (!_internal_has_ssn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = ssn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_ssn(std::string* ssn) {
  if (ssn != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.ssn)
}

// optional double balance = 7;
inline bool Account::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Account::has_balance() const {
  return _internal_has_balance();
}
inline void Account::clear_balance() {
  balance_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Account::_internal_balance() const {
  return balance_;
}
inline double Account::balance() const {
  // @@protoc_insertion_point(field_get:pb.Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(double value) {
  _has_bits_[0] |= 0x00000100u;
  balance_ = value;
}
inline void Account::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:pb.Account.balance)
}

// optional string dateopened = 8;
inline bool Account::_internal_has_dateopened() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Account::has_dateopened() const {
  return _internal_has_dateopened();
}
inline void Account::clear_dateopened() {
  dateopened_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Account::dateopened() const {
  // @@protoc_insertion_point(field_get:pb.Account.dateopened)
  return _internal_dateopened();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_dateopened(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 dateopened_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Account.dateopened)
}
inline std::string* Account::mutable_dateopened() {
  std::string* _s = _internal_mutable_dateopened();
  // @@protoc_insertion_point(field_mutable:pb.Account.dateopened)
  return _s;
}
inline const std::string& Account::_internal_dateopened() const {
  return dateopened_.Get();
}
inline void Account::_internal_set_dateopened(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  dateopened_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_dateopened() {
  _has_bits_[0] |= 0x00000020u;
  return dateopened_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_dateopened() {
  // @@protoc_insertion_point(field_release:pb.Account.dateopened)
  if (!_internal_has_dateopened()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = dateopened_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dateopened_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dateopened_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_dateopened(std::string* dateopened) {
  if (dateopened != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dateopened_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dateopened,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dateopened_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dateopened_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Account.dateopened)
}

// optional int32 accounttype = 9;
inline bool Account::_internal_has_accounttype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Account::has_accounttype() const {
  return _internal_has_accounttype();
}
inline void Account::clear_accounttype() {
  accounttype_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t Account::_internal_accounttype() const {
  return accounttype_;
}
inline int32_t Account::accounttype() const {
  // @@protoc_insertion_point(field_get:pb.Account.accounttype)
  return _internal_accounttype();
}
inline void Account::_internal_set_accounttype(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  accounttype_ = value;
}
inline void Account::set_accounttype(int32_t value) {
  _internal_set_accounttype(value);
  // @@protoc_insertion_point(field_set:pb.Account.accounttype)
}

// optional int32 admin = 10;
inline bool Account::_internal_has_admin() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Account::has_admin() const {
  return _internal_has_admin();
}
inline void Account::clear_admin() {
  admin_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t Account::_internal_admin() const {
  return admin_;
}
inline int32_t Account::admin() const {
  // @@protoc_insertion_point(field_get:pb.Account.admin)
  return _internal_admin();
}
inline void Account::_internal_set_admin(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  admin_ = value;
}
inline void Account::set_admin(int32_t value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:pb.Account.admin)
}

// -------------------------------------------------------------------

// Accounts

// repeated .pb.Account account = 1;
inline int Accounts::_internal_account_size() const {
  return account_.size();
}
inline int Accounts::account_size() const {
  return _internal_account_size();
}
inline void Accounts::clear_account() {
  account_.Clear();
}
inline ::pb::Account* Accounts::mutable_account(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Accounts.account)
  return account_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Account >*
Accounts::mutable_account() {
  // @@protoc_insertion_point(field_mutable_list:pb.Accounts.account)
  return &account_;
}
inline const ::pb::Account& Accounts::_internal_account(int index) const {
  return account_.Get(index);
}
inline const ::pb::Account& Accounts::account(int index) const {
  // @@protoc_insertion_point(field_get:pb.Accounts.account)
  return _internal_account(index);
}
inline ::pb::Account* Accounts::_internal_add_account() {
  return account_.Add();
}
inline ::pb::Account* Accounts::add_account() {
  ::pb::Account* _add = _internal_add_account();
  // @@protoc_insertion_point(field_add:pb.Accounts.account)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Account >&
Accounts::account() const {
  // @@protoc_insertion_point(field_list:pb.Accounts.account)
  return account_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Account_2eproto
